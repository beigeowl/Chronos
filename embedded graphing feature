import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import functools
import threading
import time
import psutil
import win32gui
import win32process
import win32api

class ScreenTimeApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Screen Time Tracker")
        
        self.usage_data = {}
        
        self.create_widgets()
        self.start_tracking()
        
    def create_widgets(self):
        # Create a frame for the graph
        self.graph_frame = ttk.Frame(self.root)
        self.graph_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create Matplotlib figure and axis
        self.fig, self.ax = plt.subplots()
        self.ax.set_title("Time per App")
        self.ax.set_xlabel("App")
        self.ax.set_ylabel("Seconds")
        
        # Embed the Matplotlib figure in Tkinter
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.graph_frame)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # Start animation
        self.ani = animation.FuncAnimation(self.fig, self.plot, interval=2000)
    
    def get_active_window_name(self):
        """
        Gets the name of the currently active window.
        """
        try:
            hwnd = win32gui.GetForegroundWindow()
            _, pid = win32process.GetWindowThreadProcessId(hwnd)
            process = psutil.Process(pid)
            exe_path = process.exe()
            language, codepage = win32api.GetFileVersionInfo(exe_path, '\\VarFileInfo\\Translation')[0]
            string_file_info = f'\\StringFileInfo\\{language:04x}{codepage:04x}\\FileDescription'
            description = win32api.GetFileVersionInfo(exe_path, string_file_info)
            return description
        except Exception:
            return None
    
    def track_screen_time(self):
        last_app = None
        last_time = time.time()
        
        while True:
            current_app = self.get_active_window_name()
            if current_app:
                current_time = time.time()
                if int(current_time) % 2 == 0:
                    time_spent = round(current_time - last_time, 0)
                    self.usage_data[last_app] = self.usage_data.get(last_app, 0) + time_spent
                    last_time = current_time
                last_app = current_app
            time.sleep(1)
    
    def start_tracking(self):
        tracking_thread = threading.Thread(target=self.track_screen_time, daemon=True)
        tracking_thread.start()
    
    def plot(self, frame):
        self.ax.clear()
        x = list(self.usage_data.keys())
        y = list(self.usage_data.values())
        bars = self.ax.bar(x, y)
        self.ax.bar_label(bars)
        self.canvas.draw()

if __name__ == "__main__":
    root = tk.Tk()
    app = ScreenTimeApp(root)
    root.mainloop()
